}
#change columns names
DiscreteData$tip_mat <- as.data.frame(DiscreteData$tip_mat)
colnames(DiscreteData$tip_mat) <- sprintf("I%s.%s/%s", seq(1:subdataOne$nbr_traits), i, subdataOne$row)
FinalData <- cbind(FinalData, DiscreteData$tip_mat)
}
}
if(nrow(subdata) > 1 & (nrow(subdata) - sum(subdata$model == "Na") > 1)){
#check if the dataframe is correctly filled
wrong <- which(subdata$model != "BM1" & subdata$model != "OU1")
if(length(wrong) != 0){
stop(paste("This line ", wrong, "is not filled correctly \n"))
}
ContiRows <- rep(subdata$rows[subdata$class == "continuous"],
subdata$nbr_traits[subdata$class == "continuous"]) #get the row index in the dataframe
Ntraits <- sum(subdata$nbr_traits[ContiRows])
model <- "BM1"
indexBM <- NULL
Thetas <- runif(Ntraits, min = -10, max = 10)
Alphas <- simAlpha(Ntraits, alpha = 1e-5 * log(2)) #by default, alpha is for a Brownian motion model
uncorrTraits <- sum(subdata$uncorr_traits[ContiRows])
indexUncorrTraitsBM <- NULL
uncorrTraitsBM <- sum(subdata$uncorr_traits[subdata$model == "BM1"])
uncorrTraitsOU <- uncorrTraits - uncorrTraitsBM #number of uncorrelated traits simulated with OU
#FracNocov <- sum(subdata$nbr_traits * subdata$fraction_uncorr_traits) / Ntraits
Sigmas <- simSigma(Ntraits, uncovTraits = uncorrTraits, FracNocov = subdata$fraction_uncorr_traits[ContiRows])
if("OU1" %in% subdata$model && "BM1" %in% subdata$model){
Alphas <- simAlpha(Ntraits)
model <- "OU1"
# in case uncovTraits simulated with BM
if(uncorrTraitsBM != 0){
indexUncorrTraitsBM <- 1:uncorrTraitsBM
indexBM <-c(indexUncorrTraitsBM, sample((1+uncorrTraits):Ntraits, (Ntraits - uncorrTraitsBM -
sum(subdata$nbr_trait[subdata$model == "OU1"])), replace = FALSE))
}
if(uncorrTraitsBM == 0){
#in case no uncovTraits in the BM model.
indexBM <- sample((1 + uncorrTraitsOU):Ntraits,
Ntraits - sum(subdata$nbr_trait[subdata$model == "OU1"]), replace = FALSE)
}
# set 0 to diagonal for BM1
diag(Alphas)[indexBM] <- 1e-5
}
if(sum(subdata$model == "OU1") == nrow(subdata)){
Alphas <- simAlpha(Ntraits)
model <- "OU1"
}
#rescale tree
subdataTree <- rescaleTree(SimTree, subdata)
#Simulate data
ContinuousData <- mvMORPH::mvSIM(tree = subdataTree,
model = model,
param = list(ntraits = Ntraits,
theta = Thetas, #theta = ancestral states
alpha = Alphas))
#If correlated discrete traits from continuous traits
discreteSubdata <- subset(subdata, (subdata$class != "continuous" &
(subdata$model == "BM1" | subdata$model == "OU1")))
if(nrow(discreteSubdata) >= 1){
Nstates <- rep(discreteSubdata$states, discreteSubdata$nbr_traits)
class <- rep(discreteSubdata$class, discreteSubdata$nbr_traits)
indexColumConvert <- c()
for(r in 1:nrow(discreteSubdata)){
if(discreteSubdata$model[r] == "BM1" & discreteSubdata$uncorr_traits[r] != 0){
indexColumConvert <- c(indexColumConvert, tail(indexUncorrTraitsBM, n = discreteSubdata$uncorr_traits[r]))
indexUncorrTraitsBM <- indexUncorrTraitsBM[-tail(indexUncorrTraitsBM, n = discreteSubdata$uncorr_traits[r])] #delete the index selected above
}
if(discreteSubdata$model[r] == "OU1" & discreteSubdata$uncorr_traits[r] != 0){
indexUncorrTraitsOU <- (1 + uncorrTraitsBM):uncorrTraits
indexColumConvert <- c(indexColumConvert, tail(indexUncorrTraitsOU, n = discreteSubdata$uncorr_traits[r]))
indexUncorrTraitsOU <- indexUncorrTraitsOU[-tail(indexUncorrTraitsOU, n = discreteSubdata$uncorr_traits[r])] #delete the index selected above
}
}
if(sum(discreteSubdata$model == "OU1") == nrow(discreteSubdata)){
BMTraitsRemained <- NULL
OUTraitsRemained <- sample(Ntraits[(uncorrTraitsOU+1):length(Ntraits)],
sum(discreteSubdata$nbr_traits[discreteSubdata$model == "OU1"]) - uncorrTraitsOU)
}
if(sum(discreteSubdata$model == "BM1") == nrow(discreteSubdata)){
BMTraitsRemained <- sample(Ntraits[(uncorrTraitsBM + 1):length(Ntraits)],
sum(discreteSubdata$nbr_traits[discreteSubdata$model == "BM1"]) - uncorrTraitsBM)
OUTraitsRemained <- NULL
}
indexOU <- NULL
if("OU1" %in% discreteSubdata$model && "BM1" %in% discreteSubdata$model){
BMTraitsRemained <- sample(indexBM[(uncorrTraitsBM + 1):length(indexBM)],
sum(discreteSubdata$nbr_traits[discreteSubdata$model == "BM1"]) - uncorrTraitsBM)
indexOU <- setdiff(1:Ntraits, indexBM)
OUTraitsRemained <- sample(indexOU[(uncorrTraitsOU+1):length(indexOU)],
sum(discreteSubdata$nbr_traits[discreteSubdata$model == "OU1"]) - uncorrTraitsOU)
}
if(!is.null(indexBM) & length(indexBM[(uncorrTraitsBM + 1):length(indexBM)]) == 1){
BMTraitsRemained <- indexBM[(uncorrTraitsBM + 1):length(indexBM)]
}
if(!is.null(indexOU) & length(indexOU[(uncorrTraitsOU+1):length(indexOU)]) == 1){
OUTraitsRemained <- indexOU[(uncorrTraitsOU+1):length(indexOU)]
}
indexColumConvert <- sort(c(indexColumConvert, BMTraitsRemained, OUTraitsRemained))
DiscreteData <- ChangeContinuousTraitInDiscrete(ContinuousData, indexColumConvert, Nstates, class)
#change columns names
colnames(DiscreteData) <- sprintf("F%s.%s/%s", seq(1:sum(subdata$nbr_traits)), i, ContiRows)
discreteRows <- rep(discreteSubdata$rows, discreteSubdata$nbr_traits)
colnames(DiscreteData)[indexColumConvert] <- sprintf("I%s.%s/%s",
seq(1:sum(discreteSubdata$nbr_traits)), i, discreteRows)
FinalData <- cbind(FinalData, DiscreteData)
}
else{
#change columns names
ContinuousData <- as.data.frame(ContinuousData)
colnames(ContinuousData) <- sprintf("F%s.%s/%s", seq(1:sum(subdata$nbr_traits)), i, ContiRows)
FinalData <- cbind(FinalData, ContinuousData)
}
} #close condition if subdata >2
if(any("Na" %in% subdata$model)){
NaRow <- which(subdata$model == "Na")
NaParam <- c()
for(mR in 1:length(NaRow)){
if(subdata$states[which(subdata$model == "Na" & subdata$class != "continuous")] !=
subdata$states[which(subdata$model != "Na")]){
stop("The Na trait must have the same number of states that the correlated discrete trait.")
}
manTraitValue <- subdata$manTrait[NaRow[mR]]
if(manTraitValue == 0){
manTraitValue <- sample(ncol(FinalData), 1)
}
if(subdata$class[NaRow[mR]] != "continuous"){
DiscreteData <- corDiscTraitsOneTrait(subdata$nbr_traits[NaRow[mR]],
FinalData[, manTraitValue],
subdata$highCor[NaRow[mR]])$data
NaParam <- c(NaParam, DiscreteData$param)
#change columns names
colnames(DiscreteData) <- sprintf("I%s.%s/%s",
seq(1:subdata$nbr_traits[NaRow[mR]]),
i,
subdata$row[NaRow[mR]])
FinalData <- cbind(FinalData, DiscreteData)
}
if(subdata$class[NaRow[mR]] == "continuous"){
ContinuousData <- corContiTraitsOneTrait(subdata$nbr_traits[NaRow[mR]],
FinalData[, manTraitValue],
subdata$highCor[NaRow[mR]])$data
NaParam <- c(NaParam, ContinuousData$param)
#change columns names
colnames(ContinuousData) <- sprintf("F%s.%s/%s",
seq(1:subdata$nbr_traits[NaRow[mR]]),
i,
subdata$row[NaRow[mR]])
FinalData <- cbind(FinalData, ContinuousData)
}
}
}
#Save parameters in an own list
AlphasList[[i]] <- Alphas
ThetasList[[i]] <- Thetas
SigmasList[[i]] <- Sigmas
TreeList[[i]] <- SimTree
if(any("Na" %in% subdata$model)){
NaParamList[[i]] <- NaParam
}
row.names(FinalData) <- SimTree$tip.label
if(length(grep("F.", colnames(FinalData))) > 0){
#Standardize continuous traits mean = 0  and sd = 1
ContiIndex <- grep("F.", colnames(FinalData))
FinalData[, ContiIndex] <- scale(FinalData[, ContiIndex])
}
if(length(grep("I.", colnames(FinalData))) > 0){
#convert the discrete columns in factors
DiscreteIndex <- grep("I.", colnames(FinalData))
FinalData[ ,DiscreteIndex] <- lapply(FinalData[ ,DiscreteIndex], factor)
#add levels in factor if number of levels = 1
for (c in 1:ncol(FinalData[ ,DiscreteIndex])){
if(length(levels(FinalData[ ,DiscreteIndex][,c])) == 1){
if(levels(FinalData[ ,DiscreteIndex][,c]) == "0"){
FinalData[ ,DiscreteIndex][,c] <- factor(FinalData[ ,DiscreteIndex][,c], levels = c("0", "1"))
}
else{
colName <- names(FinalData[ ,DiscreteIndex])[c]
row <- as.numeric(str_extract(colName, "(?<=\\/)\\d+"))
Nstates <- dataframe[row, "states"]
FinalData[ ,DiscreteIndex][,c] <- factor(FinalData[ ,DiscreteIndex][,c],
levels = as.character(0:(Nstates-1)))
}
}
}
}
}
#Define list of object
######################
Data <- list(FinalData = FinalData,
AlphaMatrices = AlphasList,
Thetas = ThetasList,
SigmaMatrices = SigmasList,
TreeList = TreeList[1],
PhyloParam = param_tree,
Na_param = NaParamList,
Dataframe = dataframe)
#Save data
##########
if(!is.null(save)){
save(Data, file = paste0(save, ".RData"))
}
return(Data)
}
dat <- dta
dat <- data_simulator(tree_arg, df)
dat$FinalData
library(TDIP)
setwd("C:/Users/Matthieu/Documents/UNIFR/Master_thesis/Scripts/Phylo_Imputation/Phylo_Imputation/scripts"
)
df <- read.table("../csv/DiscreteARD1DataKAP0.csv", header = T, sep = ";")
tree_arg <- list(Birth = 0.4, Death = 0.1, Ntaxa = 100)
dat <- data_simulator(tree_arg, df)
dat$Na_param
df
dat$PhyloParam
dat$Na_param
dat$Dataframe
library(TDIP)
dat <- data_simulator(tree_arg, df)
dim(dat$FinalData)
library(TDIP)
library(TDIP)
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteARD1DataKAP0.csv", header = T, sep = ";")
tree_arg <- list(Birth = 0.4, Death = 0.1, Ntaxa = 100)
dat <- TDIP::data_simulator(tree_arg, df)
library(TDIP)
dat <- TDIP::data_simulator(tree_arg, df)
library(TDIP)
dat <- TDIP::data_simulator(tree_arg, df)
library(TDIP)
dat <- TDIP::data_simulator(tree_arg, df)
dat$Na_param
dat$FinalData
library(TDIP)
df <- read.table("../csv/DiscreteARD1IndeDataKAP0.csv", header = T, sep = ";")
setwd("C:/Users/Matthieu/Documents/UNIFR/Master_thesis/Scripts/Phylo_Imputation/Phylo_Imputation/scripts")
df <- read.table("../csv/DiscreteARD1IndeDataKAP0.csv", header = T, sep = ";")
df
tree_arg <- list(Birth = 0.4, Death = 0.1, Ntaxa = 100)
dat <- data_simulator(tree_arg, df)
dat$TreeList$`0`
plot(dat$TreeList$`0`)
df <- read.table("../csv/DiscreteARD1Data.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df
df <- read.table("../csv/DiscreteARD1Data.csv", header = T, sep = ";")
df
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteARD1DataKAP0.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
dat <- data_simulator(tree_arg, df)
dat <- data_simulator(tree_arg, df)
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteARD1DataLA00001.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteARD1IndeData.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteARD1IndeDataKAP0.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteARD1IndeDataLA00001.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteBM1Data.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteBM1DataKAP0.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
df <- read.table("../csv/DiscreteBM1DataLA00001.csv", header = T, sep = ";")
dat <- data_simulator(tree_arg, df)
library(TDIP)
ImputationApproachesNames <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
ML <- c("mice_phylo", "missForest_phylo", "kNN_phylo")
ImputationApproachesNames <- c("mice_phylo")
if(ImputationApproachesNames %in% ML){print(True)}
ImputationApproachesNames %in% ML
ImputationApproachesNames <- c("mice_phylo", "phyl")
ImputationApproachesNames %in% ML
any(ImputationApproachesNames %in% ML)
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
?TDIP::state_amputation
library(TDIP)
library(TDIP)
library(TDIP)
path <- "C:/Users/Matthieu/Documents/UNIFR/Master_thesis/Scripts/Phylo_Imputation/Phylo_Imputation/csv"
setwd(path)
df <- read.table("test.csv", header = T, sep =";")
threshold <- 12
iter <- 0
count <- 0
while (count < threshold && iter < 20){
simD <- TDIP::data_simulator(list(Birth = 0.4, Death = 0.1, Ntaxa = 100), df)
count <- table(simD$FinalData$`I1.0/1`)[3]
iter <- iter + 1
}
data <- simD$FinalData[, c(1,2)]
miss <- TDIP::na_insertion(0.33, data, missingTraits = ncol(data))
miss <- TDIP::na_insertion(0.33, data, missingTraits = ncol(data), MARTraits = 1)
miss$DataNaN$MCAR$`MCAR/2/0.33`
m <- mice_phylo(miss$DataNaN$MCAR$`MCAR/2/0.33`)
library(mice)
mice(miss$DataNaN$MCAR$`MCAR/2/0.33`)
str(miss$DataNaN$MCAR$`MCAR/2/0.33`)
class(miss$DataNaN$MCAR$`MCAR/2/0.33`$`F1.0/2`)
(miss$DataNaN$MCAR$`MCAR/2/0.33`$`I1.0/1`)
class(miss$DataNaN$MCAR$`MCAR/2/0.33`$`I1.0/1`)
library(TDIP)
df <- read.table("test.csv", header = T, sep =";")
threshold <- 12
iter <- 0
count <- 0
while (count < threshold && iter < 20){
simD <- TDIP::data_simulator(list(Birth = 0.4, Death = 0.1, Ntaxa = 100), df)
count <- table(simD$FinalData$`I1.0/1`)[3]
iter <- iter + 1
}
simD$FinalData
simD$FinalData$`F1.0/2`
class(simD$FinalData$`F1.0/2`)
library(TDIP)
threshold <- 12
iter <- 0
count <- 0
while (count < threshold && iter < 20){
simD <- TDIP::data_simulator(list(Birth = 0.4, Death = 0.1, Ntaxa = 100), df)
count <- table(simD$FinalData$`I1.0/1`)[3]
iter <- iter + 1
}
data <- simD$FinalData[, c(1,2)]
simD$FinalData$`F1.0/2`
simD$FinalData
data <- simD$FinalData[, c(1,2)]
miss <- TDIP::na_insertion(0.33, data, missingTraits = ncol(data), MARTraits = 1)
m <- mice_phylo(miss$DataNaN$MCAR$`MCAR/2/0.33`)
m <- mice_phylo(miss$DataNaN$MCAR$`MCAR/2/0.33`, nbrMI = 5)
mice(miss$DataNaN$MCAR$`MCAR/2/0.33`)
m
data <- TDIP::state_amputation(data = data, state = "2", amount = 0.33, level = "top", 1, 2)
data <- simD$FinalData[, c(1,2)]
missTop <- TDIP::state_amputation(data = data, state = "2", amount = 0.33, level = "top", 1, 2)
class(data)
data
library(TDIP)
missTop <- TDIP::state_amputation(data = data, state = "2", amount = 0.33, level = "top", 1, 2)
data
state <- "2"
amount <- 0.33
level <- 'top'
columnNa <- 1
columnConti <- 2
index_state <- which(data[, columnNa, drop = FALSE] == state)
index_state
subData <- data[which(data[index_state, columnNa] == state), ]
if(level == "rdn"){
amputedData <- TDIP::mcar_miss_meca(amount, subData, 1)
}
indexNa <- order(subData[,columnConti], decreasing = TRUE)[1:(nrow(subData[,columnConti])*amount)]
order(subData[,columnConti], decreasing = TRUE)
[1:(nrow(subData[,columnConti])*amount)]
1:(nrow(subData[,columnConti])*amount)
nrow(subData[,columnConti])
subData[,columnConti]
indexNa <- order(subData[,columnConti], decreasing = TRUE)[1:(nrow(subData[,columnConti, drop = FALSE])*amount)]
amputedData <- subData
amputedData[indexNa, columnNa] <- NA
library(TDIP)
missTop <- TDIP::state_amputation(data = data, state = "2", amount = 0.33, level = "top", 1, 2)
missTop
strategies <- c("NP")
ImputationApproachesNames <- c("mice_phylo", "missForest_phylo",
"kNN_phylo")
imputedData <- TDIP::missing_data_imputation(ImputationApproachesNames,
missTop,
tree = NULL,
strategies,
maxit = 5,
nbrMI = 1,
k = 3,
numFun = laeken::weightedMedian,
catFun = VIM::maxCat,
mincor = NULL,
varfrac = varfrac,
save = NULL)
TDIP::missForest_phylo(missTop)
missForest_imputation <- missForest::missForest(xmis = missTop, maxiter = 5,
ntree = 100, mtry = 5, verbose = TRUE)
TDIP::kNN_phylo(missTop)
TDIP::kNN_phylo(missTop, k = 2)
TDIP::kNN_phylo(missTop, k = 3, numFun = laeken::weightedMedian,
catFun = VIM::maxCat)
TDIP::mice_phylo(missTop)
TDIP::mice_phylo(missTop, nbrMI = 1)
sqrt(ncol(missTop))
TDIP::missForest_phylo(missTop, mtry = 1)
class(data)
missForest::missForest(missTop, mtry=1)
head(missTop)
# Create a sample dataset with missing values
datafr <- data.frame(
Column1 = c(1, 2, NA, 4, 5),
Column2 = c(NA, 6, 7, NA, 9)
)
# Impute missing values using missForest
imputed_data <- missForest(datafr)
# Impute missing values using missForest
imputed_data <- missForest::missForest(datafr)
imputed_data
# Create a sample dataset with missing values
datafr <- data.frame(
Column1 = c(1, 2, NA, 4, 5),
Column2 = c(NA, 6, 7, NA, 9)
)
nrow(datafr)
# Impute missing values using missForest
imputed_data <- missForest::missForest(datafr)
TDIP::missForest_phylo(missTop, mtry = 1, tree = simD$TreeList$0)
TDIP::missForest_phylo(missTop, tree = simD$TreeList$0)
TDIP::missForest_phylo(missTop, tree = simD$TreeList$`0`)
missingData <- missTop
colNames <- names(missingData)
#missForest doesn't support when more than 53 classes then remove the columns having (is no NA inside)
splitData <- NULL
for(col in ncol(missingData):1){
if(is.factor(missingData[,col])){
if(length(levels(missingData[,col])) > 52){
if(any(is.na(missingData[,col]))){
stop("missForest doesn't able to impute missing value in a variable with more than 53 categories")
}
else{
if(is.null(splitData)){
splitData <- missingData[,col, drop = FALSE]
}
else{
splitData <- cbind(splitData, missingData[,col, drop = FALSE])
}
missingData[,col] <- NULL
}
}
}
}
Nvariables <- ncol(missingData)
Nvariables
#include imputed data in case
if(!is.null(hint) & variance_fraction == 2){
#change names columns hint
colnames(hint) <- paste0("H",as.character(1:ncol(hint)))
missingData <- cbind(missingData, hint)
}
hint <- NULL
TDIP::missForest_phylo(missTop, tree = simD$TreeList$`0`, variance_fraction = 0.9)
TDIP::missForest_phylo(missTop, mtry = 1, tree = simD$TreeList$`0`, variance_fraction = 0.9)
TDIP::missForest_phylo(missTop, mtry = 1)
variable_1=c(1:10)
variable_2=c(c(11:14), NA, c(16:20))
variable_3=c(21:30)
dat_miss<- data.frame(variable_1,variable_2,variable_3)
dat_miss
missForest_phylo(dat_miss)
missForest_phylo(missTop)
mis <- cbind(missTop, 1:100)
missForest_phylo(mis)
ImputationApproachesNames <- c("mice_phylo",
"kNN_phylo")
imputedData <- TDIP::missing_data_imputation(ImputationApproachesNames,
missTop,
tree = NULL,
strategies,
maxit = 5,
nbrMI = 1,
k = 3,
numFun = laeken::weightedMedian,
catFun = VIM::maxCat,
mincor = NULL,
varfrac = varfrac,
save = NULL)
imputedData$MICE_NP
imputedData$KNN_NP
error <- TDIP::imputation_error(imputedData[[1]],
simD$FinalData,
missTop,
ImputationApproachName,
df)
error <- TDIP::imputation_error(imputedData[[1]],
simD$FinalData,
missTop,
ImputationApproachesNames,
df)
imputationApproachName <- names(imputedData)[1]
error <- TDIP::imputation_error(imputedData[[1]],
simD$FinalData,
missTop,
imputationApproachName,
df)
error
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
library(TDIP)
library(remotes)
install_github("Matgend/TDIP")
library(TDIP)
library(TDIP)
?TDIP::state_amputation
library(TDIP)
library(TDIP)
?TDIP::state_amputation_sameNA_top_rnd
